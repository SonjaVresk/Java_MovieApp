/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.model.Genre;
import hr.algebra.model.GenreTransferable;
import hr.algebra.model.Movie;
import hr.algebra.model.MoviesXML;
import hr.algebra.utilities.FileUtils;
import hr.algebra.utilities.JAXBUtils;
import hr.algebra.utilities.MessageUtils;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import javax.swing.text.JTextComponent;

/**
 *
 * @author s_vre
 */
public class GenreToMoviePanel extends javax.swing.JPanel {

    private static final String FILENAME = "src/main/resources/moviesGenre.xml";

    private final List<Movie> movies = new ArrayList<>();
    private final Set<Genre> genres = new TreeSet<>();
    private final Set<Genre> allGenres = new TreeSet<>();

    private final DefaultListModel<Movie> moviesModel = new DefaultListModel<>();
    private final DefaultListModel<Genre> genresModel = new DefaultListModel<>();
    private final DefaultListModel<Genre> allGenresModel = new DefaultListModel<>();

    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;

    /**
     * Creates new form GenreToMovieMatch
     */
    public GenreToMoviePanel() throws Exception {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lsMovies = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsGenres = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsSelectedGenres = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnAddMovie = new javax.swing.JButton();
        lbTitleError = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        lbSelectedGenresError = new javax.swing.JLabel();
        btnAddGenre = new javax.swing.JButton();
        tfAddGenre = new javax.swing.JTextField();
        lbAddGenreError = new javax.swing.JLabel();
        lbLinkError = new javax.swing.JLabel();
        tfLink = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tfDescription = new javax.swing.JTextField();
        lbDescriptionError = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tfPublished = new javax.swing.JTextField();
        lbPublishedError = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tfPicture = new javax.swing.JTextField();
        lbPictureError = new javax.swing.JLabel();
        btnChoose = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 204, 204));
        setForeground(new java.awt.Color(51, 255, 0));
        setPreferredSize(new java.awt.Dimension(1000, 600));

        lsMovies.setBackground(new java.awt.Color(209, 181, 181));
        lsMovies.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lsMovies.setForeground(new java.awt.Color(51, 51, 51));
        jScrollPane1.setViewportView(lsMovies);

        jLabel1.setFont(new java.awt.Font("Chiller", 1, 36)); // NOI18N
        jLabel1.setText("Movies:");

        lsGenres.setBackground(new java.awt.Color(209, 181, 181));
        lsGenres.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lsGenres.setForeground(new java.awt.Color(51, 51, 51));
        jScrollPane2.setViewportView(lsGenres);

        jLabel2.setFont(new java.awt.Font("Chiller", 1, 24)); // NOI18N
        jLabel2.setText("All genres:");

        jLabel3.setFont(new java.awt.Font("Chiller", 1, 18)); // NOI18N
        jLabel3.setText("Title:");

        lsSelectedGenres.setBackground(new java.awt.Color(209, 181, 181));
        lsSelectedGenres.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lsSelectedGenres.setForeground(new java.awt.Color(51, 51, 51));
        jScrollPane3.setViewportView(lsSelectedGenres);

        jLabel4.setFont(new java.awt.Font("Chiller", 1, 24)); // NOI18N
        jLabel4.setText("Selected genres:");

        btnSave.setBackground(new java.awt.Color(242, 94, 94));
        btnSave.setFont(new java.awt.Font("Chiller", 1, 24)); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnRefresh.setBackground(new java.awt.Color(242, 94, 94));
        btnRefresh.setFont(new java.awt.Font("Chiller", 1, 24)); // NOI18N
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnAddMovie.setBackground(new java.awt.Color(242, 94, 94));
        btnAddMovie.setFont(new java.awt.Font("Chiller", 1, 24)); // NOI18N
        btnAddMovie.setText("Add");
        btnAddMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMovieActionPerformed(evt);
            }
        });

        lbTitleError.setFont(new java.awt.Font("Chiller", 1, 24)); // NOI18N
        lbTitleError.setForeground(new java.awt.Color(255, 51, 51));
        lbTitleError.setText("X");

        tfTitle.setBackground(new java.awt.Color(225, 212, 212));
        tfTitle.setForeground(new java.awt.Color(51, 51, 51));

        lbSelectedGenresError.setFont(new java.awt.Font("Chiller", 1, 24)); // NOI18N
        lbSelectedGenresError.setForeground(new java.awt.Color(255, 51, 51));
        lbSelectedGenresError.setText("X");

        btnAddGenre.setBackground(new java.awt.Color(209, 106, 106));
        btnAddGenre.setFont(new java.awt.Font("Chiller", 1, 18)); // NOI18N
        btnAddGenre.setForeground(new java.awt.Color(51, 51, 51));
        btnAddGenre.setText("Add genre");
        btnAddGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddGenreActionPerformed(evt);
            }
        });

        tfAddGenre.setBackground(new java.awt.Color(225, 212, 212));

        lbAddGenreError.setFont(new java.awt.Font("Chiller", 1, 24)); // NOI18N
        lbAddGenreError.setForeground(new java.awt.Color(255, 51, 51));
        lbAddGenreError.setText("X");

        lbLinkError.setFont(new java.awt.Font("Chiller", 1, 24)); // NOI18N
        lbLinkError.setForeground(new java.awt.Color(255, 51, 51));
        lbLinkError.setText("X");

        tfLink.setBackground(new java.awt.Color(225, 212, 212));
        tfLink.setForeground(new java.awt.Color(51, 51, 51));

        jLabel5.setFont(new java.awt.Font("Chiller", 1, 18)); // NOI18N
        jLabel5.setText("Link:");

        jLabel6.setFont(new java.awt.Font("Chiller", 1, 18)); // NOI18N
        jLabel6.setText("Description:");

        tfDescription.setBackground(new java.awt.Color(225, 212, 212));
        tfDescription.setForeground(new java.awt.Color(51, 51, 51));

        lbDescriptionError.setFont(new java.awt.Font("Chiller", 1, 24)); // NOI18N
        lbDescriptionError.setForeground(new java.awt.Color(255, 51, 51));
        lbDescriptionError.setText("X");

        jLabel7.setFont(new java.awt.Font("Chiller", 1, 18)); // NOI18N
        jLabel7.setText("Published:");

        tfPublished.setBackground(new java.awt.Color(225, 212, 212));
        tfPublished.setForeground(new java.awt.Color(51, 51, 51));
        tfPublished.setName("Date"); // NOI18N

        lbPublishedError.setFont(new java.awt.Font("Chiller", 1, 24)); // NOI18N
        lbPublishedError.setForeground(new java.awt.Color(255, 51, 51));
        lbPublishedError.setText("X");

        jLabel8.setFont(new java.awt.Font("Chiller", 1, 18)); // NOI18N
        jLabel8.setText("Picture:");

        tfPicture.setBackground(new java.awt.Color(225, 212, 212));
        tfPicture.setForeground(new java.awt.Color(51, 51, 51));

        lbPictureError.setFont(new java.awt.Font("Chiller", 1, 24)); // NOI18N
        lbPictureError.setForeground(new java.awt.Color(255, 51, 51));
        lbPictureError.setText("X");

        btnChoose.setBackground(new java.awt.Color(209, 106, 106));
        btnChoose.setFont(new java.awt.Font("Chiller", 1, 18)); // NOI18N
        btnChoose.setForeground(new java.awt.Color(51, 51, 51));
        btnChoose.setText("Choose");
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbSelectedGenresError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(tfTitle)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(tfLink)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(18, 18, 18)
                                            .addComponent(lbLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(lbPictureError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(149, 149, 149))))
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(tfPublished)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addComponent(lbPublishedError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(tfDescription)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addComponent(lbDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(tfPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(btnAddMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(35, 35, 35)
                                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(29, 29, 29)
                                        .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 300, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfAddGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbAddGenreError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(btnAddGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(27, 27, 27))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lbTitleError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(tfTitle)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lbLinkError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(tfLink))))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lbPublishedError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(tfPublished)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lbDescriptionError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(tfDescription))))
                        .addGap(22, 22, 22)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbPictureError)
                            .addComponent(btnChoose))
                        .addGap(88, 88, 88)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbSelectedGenresError)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbAddGenreError, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfAddGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAddGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMovieActionPerformed
        if (!formValid()) {
            return;
        }
        try {
            Movie movie = new Movie(
                    tfTitle.getText().trim(),
                    tfLink.getText().trim(),
                    tfDescription.getText().trim(),
                    tfPicture.getText().trim(),
                    LocalDateTime.parse(
                            tfPublished.getText().trim(), Movie.DATE_FORMATTER),
                    new TreeSet<Genre>(genres),
                    null,
                    null
            );

            movies.add(movie);
            loadMoviesModel();
            clearForm();
        } catch (Exception ex) {
            Logger.getLogger(GenreToMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }//GEN-LAST:event_btnAddMovieActionPerformed

    private void btnAddGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddGenreActionPerformed

        if (tfAddGenre.getText().trim().isEmpty()) {
            lbAddGenreError.setVisible(true);
        } else {
            try {
                Genre genre = new Genre(
                        tfAddGenre.getText().trim()
                );

                allGenres.add(genre);
                loadAllGenressModel();
                tfAddGenre.setText("");
                lbAddGenreError.setVisible(false);
            } catch (Exception ex) {
                Logger.getLogger(GenreToMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnAddGenreActionPerformed

    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        File file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (file == null) {
            return;
        }
        tfPicture.setText(file.getAbsolutePath());
    }//GEN-LAST:event_btnChooseActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            JAXBUtils.save(new MoviesXML(movies), FILENAME);
            MessageUtils.showInformationMessage("Info", "Movies saved");
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Unable to save movies");
            Logger.getLogger(GenreToMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        loadMoviesAndGenres();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void init() throws Exception {
        initValidation();
        hideErrors();
        loadAllGenressModel();
        loadMoviesModel();
        initDragNDrop();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddGenre;
    private javax.swing.JButton btnAddMovie;
    private javax.swing.JButton btnChoose;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbAddGenreError;
    private javax.swing.JLabel lbDescriptionError;
    private javax.swing.JLabel lbLinkError;
    private javax.swing.JLabel lbPictureError;
    private javax.swing.JLabel lbPublishedError;
    private javax.swing.JLabel lbSelectedGenresError;
    private javax.swing.JLabel lbTitleError;
    private javax.swing.JList<Genre> lsGenres;
    private javax.swing.JList<Movie> lsMovies;
    private javax.swing.JList<Genre> lsSelectedGenres;
    private javax.swing.JTextField tfAddGenre;
    private javax.swing.JTextField tfDescription;
    private javax.swing.JTextField tfLink;
    private javax.swing.JTextField tfPicture;
    private javax.swing.JTextField tfPublished;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void initValidation() {
        validationFields = Arrays.asList(tfTitle,
                tfLink,
                tfDescription,
                tfPicture,
                tfPublished);

        errorLabels = Arrays.asList(lbTitleError,
                lbLinkError,
                lbDescriptionError,
                lbPictureError,
                lbPublishedError,
                lbSelectedGenresError
        );
    }

    private void hideErrors() {
        errorLabels.forEach(e -> e.setVisible(false));
        lbAddGenreError.setVisible(false);
    }

    private void loadGenresModel() {
        genresModel.clear();
        genres.forEach(genresModel::addElement);
        lsSelectedGenres.setModel(genresModel);
    }

    private void loadAllGenressModel() throws Exception {
        allGenresModel.clear();
        allGenres.forEach(allGenresModel::addElement);
        lsGenres.setModel(allGenresModel);
    }

    private void loadMoviesModel() throws Exception {
        moviesModel.clear();
        movies.forEach(moviesModel::addElement);
        lsMovies.setModel(moviesModel);
    }

    private boolean formValid() {
        hideErrors();
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setVisible(validationFields.get(i).getText().trim().isEmpty());
            
             if ("Date".equals(validationFields.get(i).getName())) {
                try {
                    LocalDateTime.parse(validationFields.get(i).getText().trim(), Movie.DATE_FORMATTER);
                } catch (Exception e) {
                    ok = false;
                    errorLabels.get(i).setVisible(true);
                }
            }
        }
        if (lsSelectedGenres.getModel().getSize() == 0) {
            lbSelectedGenresError.setVisible(true);
            ok = false;
        }
        return ok;
    }

    private void clearForm() {
        hideErrors();
        validationFields.forEach(e -> e.setText(""));
        genresModel.clear();
        genres.clear();
        lsGenres.clearSelection();
    }

    private void initDragNDrop() {
        lsGenres.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsGenres.setDragEnabled(true);
        lsGenres.setTransferHandler(new ExportHandler());
        lsSelectedGenres.setDropMode(DropMode.ON);
        lsSelectedGenres.setTransferHandler(new ImportHandler());
    }

    private void loadMoviesAndGenres() {
         try {
            MoviesXML moviesXML = (MoviesXML) JAXBUtils.load(MoviesXML.class, FILENAME);
            movies.clear();
            movies.addAll(moviesXML.getmovies());
            allGenres.clear();
            movies.forEach(movie -> allGenres.addAll(movie.getGenres()));
            loadMoviesModel();
            loadAllGenressModel();

        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Unable to load movies");
            Logger.getLogger(GenreToMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //Što se prenosi sa Genre liste:
    private class ExportHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new GenreTransferable(
                    lsGenres.getSelectedValue()
            );
        }
    }

    //Što se unosi u selectedGenres listu:
    private class ImportHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(
                    GenreTransferable.GENRE_FLAVOR
            );
        }

        @Override
        public boolean importData(TransferSupport support) {

            Transferable transferable = support.getTransferable();
            try {
                Genre genre = (Genre) transferable.getTransferData(GenreTransferable.GENRE_FLAVOR);

                if (genres.add(genre)) {
                    loadGenresModel();
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(GenreToMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            return false;
        }
    }
}
